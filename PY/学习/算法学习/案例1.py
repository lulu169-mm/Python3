def find_num():
    """问题描述：请找出一个五位数，要求满足下面的条件
        #TODO 算法描述题x算=题题题题题题
       分析：既然是五位数，那么首位数'算'不能是0，因为
       计算结果的位数都是'题'，所以这个五位数的首位数'算'
       不能是1或2.开始使用枚举算法逐一计算，找出最终满足
       条件的答案。"""
    for i in range(10000, 100000):  # 五位数范围是 10000 到 99999
        for j in range(1, 10):  # j 范围是 1 到 9，因为 i 的首位数不能是 0
            if i * j % 111111 == 0:  # i * j 结果的六位数每一位都是 1
                if len(set(str(i))) == 5:  # i 必须是一个五位数，且所有数字不重复（set即集合，唯一性....）
                    if str(j) == str(i)[0]:  # j 必须等于 i 的首位数字
                        print("找到了，数字是 {}".format(i))  # 得到结果：79365
                        # TODO 79365x7=555555


if __name__ == '__main__':
    find_num()


# def find_num():
#     """寻找一个五位数 'i'，使得它与一个一位数 'j' 相乘的结果满足特定条件。"""
#     for i in range(10000, 100000):  # 遍历所有五位数（从10000到99999）
#         for j in range(1, 10):  # 遍历数字1到9（因为 'j' 应为一位数）
#             if i * j % 111111 == 0:  # 检查乘积 'i * j' 的每位数字是否都是 '1'（即111111）
#                 if len(set(str(i))) == 5:  # 确保 'i' 是一个五位数且所有数字都不重复
#                     if str(j) == str(i)[0]:  # 确保 'j' 等于 'i' 的第一位数字
#                         return i  # 找到符合条件的数字，直接返回
#
#     return None  # 如果未找到符合条件的数字，返回 None 或者其他适当的值
#
#
# if __name__ == '__main__':
#     # 调用函数并获取结果
#     result = find_num()
#
#     # 在这里可以进一步处理 result 的值，例如打印出来或者使用它进行其他计算
#     if result is not None:
#         print("找到了数字：{}".format(result))
#     else:
#         print("未找到符合条件的数字。")
